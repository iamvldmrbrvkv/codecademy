Introduction
TypeScript lets us type variables https://www.codecademy.com/resources/docs/typescript/variables with different levels of type specificity. If we want to enforce that a variable is a string, we can type it as a string. This type is very specific since TypeScript will only allow the variable to have a string value.

On the other end of the specificity spectrum, we could type a variable as any. This type is very unspecific. TypeScript will allow a value of any type to be assigned without complaining and throwing an error.

These two levels of type specificity work for many parts of our programs. However, sometimes we need to strike a balance between extreme specificity and being totally unspecific with our types. Imagine that we have to write a program that takes in an employee’s ID, then prints the ID to the console. The catch is that an employee’s ID could be a string or a number. Since we need our ID variable to allow more than one type, we could use an any type, like this:

let ID: any;

console.log(`The ID is ${ID}.`);

The problem with the any type is that any value might not work with our program. To solve this problem, TypeScript allows us to be flexible with how specific our types are by combining different types. When we combine types, it is called a union.

Defining Unions
Unions https://www.codecademy.com/resources/docs/typescript/unions allow us to define multiple allowed type members by separating each type member with a vertical line character |. With a union, we can re-type the program from the previous exercise like this:

let ID: string | number;

// number
ID = 1;

// or string
ID = '001';

console.log(`The ID is ${ID}.`);

In this example, string | number is a union that allows ID to be a string or a number. It’s more flexible than a single primitive type, but much more specific than the any type.

Unions can be written anywhere a type value is defined, including function parameters:

function getMarginLeft(margin: string | number) {
  return { 'marginLeft': margin };
}

Using unions to type function parameters is especially convenient because functions https://www.codecademy.com/resources/docs/typescript/functions often need to handle multiple types of input.

Instructions

1.
We’ve written a function that creates a custom version of console.log() named printNumsAndStrings(). If you hover over the printNumsAndStrings() function’s statement parameter, you’ll notice that TypeScript infers that statement has an any type. Let’s make this type more specific with a union.

Add a union to the statement parameter with two type members: string and number.

2.
Now call the printNumsAndStrings() function twice, once with a number as its argument and once with a string its argument, then run your code.

3.
In the command line, run tsc to compile your code.

4.
Run node index.js to execute your compiled code. You should see the custom log messages from the printNumsAndStrings() function as the output.

index.ts

function printNumsAndStrings(statement: string | number) {
  console.log(`ℹ️ LOG:: ${statement}`);
}

printNumsAndStrings('hello!');
printNumsAndStrings(11);

Type Narrowing
Typing with unions https://www.codecademy.com/resources/docs/typescript/unions gives us more flexibility with type specificity, but there’s also more to consider. For instance, look over this union:

function getMarginLeft(margin: string | number) {
  // ...
}

Since margin can be a string or a number, we may want to perform different logic in the getMarginLeft() function’s body that does one thing for strings and another for numbers. To do this, we could implement a type guard. A type guard is a conditional that checks if a variable is a certain type, like this:

function getMarginLeft(margin: string | number) {
  // margin may be a string or number here
  
  if (typeof margin === 'string') {
    // margin must be a string here
  }
}

In the example above, TypeScript is able to read the type guard and infer that the margin variable inside the type guard must be a string. Since TypeScript knows margin is a string, it will allow us to use string methods on margin, like this:

if (typeof margin === 'string') {
  return margin.toLowerCase();
}

If we tried to call margin.toLowerCase() outside of the string type guard, TypeScript would complain that the .toLowerCase() method does not exist on number types. This error would occur because margin is typed as a string | number union.

This concept is called type narrowing https://www.codecademy.com/resources/docs/typescript/narrowing. Type narrowing is when TypeScript can figure out what type a variable can be at a given point in our code. In our examples, TypeScript has narrowed the type inside the type guard to only be a string. Type narrowing allows us to use unions, then perform type-specific logic without TypeScript getting in the way.

Instructions

1.
We’ve begun to write a function named formatValue() that should take in strings or numbers, then format them.

Write a type guard that checks if the typeof value is a 'string'. If it is, then console.log() the string as a lowercase string with .toLowerCase().

2.
In the command line, run tsc to compile your code.

3.
Run node index.js to execute your compiled code. You should see ‘hiya’ as the output.

4.
Inside the body of formatValue(), write another type guard that checks if value is a 'number'. If it is, then console.log() the number with two zeros after the decimal with .toFixed(2).

5.
In the command line, run tsc to compile your code.

6.
Run node index.js to run your compiled code. We’re expecting to see 42.00 in the terminal output.

index.ts

function formatValue(value: string | number) {
  // Write your code here
  if (typeof value === 'string') {
    console.log(value.toLowerCase())
  }
  if (typeof value === 'number') {
    console.log(value.toFixed(2))
  }
}

formatValue('Hiya');
formatValue(42);

Inferred Union Return Types
One of the awesome things about TypeScript is that it’s able to infer types in many cases so that we don’t have to manually write them. A great example is a function’s return type. TypeScript will look at the contents of a function and infer which types the function can return. If there are multiple possible return types, TypeScript will infer the return type as a union.

For instance, take this example, where we call a function named getBookFromServer(), which might fail:

function getBook() {
  try {
    return getBookFromServer();
  } catch (error) {
    return `Something went wrong: ${error}`;
  }
}

If the call is successful, the function will return a Book type describing a book. If the call fails, the function will return a string. getBook() can return a Book or string type, TypeScript infers the return type as the union Book | string. Since TypeScript can infer the function’s return type, there’s no need for us to manually define it.

Instructions

1.
In the editor, we have a User type that describes a user. In addition, there’s a function named createUser() that randomly returns a user or an error message (we’re simulating a call to a server that might fail). We’d like to call the createUser() function, then store its response in a typed variable.

Declare a variable named userData that stores the returned value of createUser(). Then, go back and provide userData with the correct union type.

2.
Run tsc in the terminal and make sure there are no type errors.

index.ts

type User = {
  id: number;
  username: string;
};

function createUser() {
  const randomChance = Math.random() >= 0.5;

  if (randomChance) {
    return { id: 1, username: 'nikko' };
  } else {
    return 'Could not create a user.';
  }
}

let userData: User | string = createUser()

Unions and Arrays
Unions https://www.codecademy.com/resources/docs/typescript/unions are even more powerful when used in combination with arrays https://www.codecademy.com/resources/docs/typescript/arrays.

For instance, we can represent time in TypeScript with a number or a string type. If we had a list of dates in both types, we’d need an array that allows for string and number values. Unions are here to help.

To create a union that supports multiple types for an array’s values, wrap the union in parentheses (string | number), then use array notation [].

const dateNumber = new Date().getTime(); // returns a number
const dateString = new Date().toString(); // returns a string

const timesList: (string | number)[] = [dateNumber, dateString];

Above, the timesList variable is typed to allow string and number types as values in its array. If we try to add a value to timesList that is not either type, like with timesList.push(true), TypeScript would display an error that boolean types are not allowed inside timesList.

One last thing: the parentheses are vitally important to type arrays correctly. If we left out the parentheses and wrote string | number[], that type would allow strings or arrays of only numbers.

Instructions

1.
Inspect the program in the editor. This program has a function that takes home addresses and their respective prices, formats them, then returns them. If you hover over the listings parameter in formatListings(), the type of listings is inferred as any. Let’s type this parameter.

Look at the definition of formatListings(), then define a union array type on the listings parameter.

2.
Run tsc in the terminal to make sure there are no type errors.

index.ts

Common Key Value Pairs
When we put type members in a union, TypeScript will only allow us to use the common methods and properties that all members of the union share. Take this code:

const batteryStatus: boolean | number = false;

batteryStatus.toString(); // No TypeScript error
batteryStatus.toFixed(2); // TypeScript error

Since batteryStatus can be a boolean or a number, TypeScript will only allow us to call methods that both number and boolean share. They both share .toString(), so we’re good there. But, since only number has a .toFixed() method, TypeScript will complain if we try to call it.

This rule also applies to type objects that we define. Take this code:

type Goose = { 
  isPettable: boolean; 
  hasFeathers: boolean;
  canThwartAPicnic: boolean;
}

type Moose = {
  isPettable: boolean; 
  hasHoofs: boolean;
}

const pettingZooAnimal: Goose | Moose = { isPettable: true };

console.log(pettingZooAnimal.isPettable); // No TypeScript error
console.log(pettingZooAnimal.hasHoofs); // TypeScript error

Like before, since .isPettable is on both Goose and Moose types, TypeScript will allow us to call it. But since .hasHoofs is only a property on Moose, we cannot call that method on pettingZooAnimal. Any properties or methods that are not shared by all of the union’s members won’t be allowed and will produce a TypeScript error.

Instructions

1.
In the editor, we’ve written a program that should display a message about a social media event. The getFriendNameFromEvent() function takes an event, then returns the friend’s displayName or username.

Let’s start by adding a type to the getFriendNameFromEvent()’s event parameter. Use a union to allow event to be a Like or a Share, then save your code.

2.
In getFriendNameFromEvent()‘s body, it returns event.displayName || event.username. Hover over event.displayName. You’ll see a pop-up with this error message:

Property 'displayName' does not exist on type 'Like | Share'.
Property 'displayName' does not exist on type 'Share'.(2339)

This message is pointing out that there’s no displayName property on the Share type. In the Share type, add a displayName of type string, just like on the Like type.

3.
Now run tsc in the terminal to verify there are no type errors.

index.ts

type Like = {
  username: string;
  displayName: string;
};

type Share = {
  username: string;
  displayName: string;
};

function getFriendNameFromEvent(event: Like | Share) {
  return event.displayName || event.username;
}

const newEvent = {
  username: 'vkrauss',
  displayName: 'Veronica Krauss',
};

const friendName = getFriendNameFromEvent(newEvent);

console.log(`You have an update from ${friendName}.`);

Unions with Literal Types
We can use literal types with TypeScript unions https://www.codecademy.com/resources/docs/typescript/unions. Literal type unions are useful when we want to create distinct states within a program.

For instance, if we were writing the code that controlled stoplights, we might write a program like this:

type Color = 'green' | 'yellow' | 'red';

function changeLight(color: Color) {
  // ...
}

With the code above, we could ensure that wherever changeLight() is called, that it gets passed only allowed stoplight colors. If we tried to call changeLight('purple'), TypeScript would complain, since that is not a valid stoplight color.

This technique allows us to write functions https://www.codecademy.com/resources/docs/typescript/functions that are specific about the states they can handle, which helps us write code that’s less prone to errors.

Instructions

1.
Let’s write a program that will use literal types and unions to display the states of a download button.

Start by writing a type named Status. It should be equal to the union of three literal types: 'idle', 'downloading', and 'complete'.

2.
Next, write a function named downloadStatus(). It should have one parameter named status, which should be typed as the Status type you wrote in the previous step.

3.
Inside the downloadStatus() function’s body, write three conditionals that output different messages based on status.

If status is 'idle', console.log() a 'Download' message.

If status is 'downloading', console.log() a 'Downloading...' message.

If status is 'complete', console.log() a 'Your download is complete!' message.

4.
Now that we have a downloadStatus() function with distinct states, let’s call it!

Call downloadStatus() with a valid argument.

5.
In the command line, run tsc to compile your code.

6.
Run node index.js to execute your compiled code. You should see one of the three console.log() statements you wrote print to the console.

index.ts

type Status = 'idle' | 'downloading' | 'complete'

function downloadStatus(status: Status) {
  if (status === 'idle') {
    console.log('Download')
  }
  if (status === 'downloading') {
    console.log('Downloading...')
  }
  if (status === 'complete') {
    console.log('Your download is complete!')
  }
}

downloadStatus('idle')

UNION TYPES
Review Unions
🙌 Way to go! We’ve learned a variety of ways to create types that are as specific as we need with unions https://www.codecademy.com/resources/docs/typescript/unions. To recap, we’ve learned:

We can combine multiple types with a vertical bar character |. This is the syntax for defining a union. Each type in a union is called a type member.
We can narrow down what methods and properties are available in a program with type narrowing. Type narrowing https://www.codecademy.com/resources/docs/typescript/narrowing allows us to type a variable as a union, then narrow down the union with a type guard to call type member specific methods and properties.
If a function can return multiple types, TypeScript will infer all possible return types as a union.
We can use unions to allow arrays https://www.codecademy.com/resources/docs/typescript/arrays to have multiple types of values.
To call a method or property on a variable typed as a union, we can only call methods or properties that are identical on all members of the union.
We can define states within our program by using literal types and unions.