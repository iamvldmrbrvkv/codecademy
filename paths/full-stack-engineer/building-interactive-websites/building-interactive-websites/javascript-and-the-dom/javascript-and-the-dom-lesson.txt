The Document Keyword
The Document Object Model, abbreviated DOM, is a powerful tree-like structure that organizes the elements on a web page and allows scripting languages to access them. 
This lesson will focus on some of the most useful methods and properties of the DOM interface https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model in JavaScript. 
This interface is implemented by every modern browser.
First things first! The document object in JavaScript is the door to the DOM structure. 
The document object allows you to access the root node of the DOM tree. 
Before you can access a specific element in the page, first you must access the document structure itself. 
The document object allows scripts to access children of the DOM as properties.
For example, if you want to access the <body> element from your script, you can access it as a property of the document object by using document.body. 
This property will return the body element of that DOM.
Similarly, you could access the <title> element with the .title property. 
Here is a comprehensive list https://developer.mozilla.org/en-US/docs/Web/API/Document of all document properties.

Tweak an Element
When using the DOM in your script to access an HTML element, whether it’s an <li> element or the entire <body> element, you also have access to all of that element’s properties.
This includes the ability to modify the contents of the element as well as its attributes and properties, which can range from modifying the text inside a <p> element to assigning a new background color to a <div>. 
For example, the .innerHTML property allows you to access and set the contents of an element.
Let’s take a look at how we can reassign the contents of the <body> element to the text 'The cat loves the dog':
document.body.innerHTML = 'The cat loves the dog.';
The .innerHTML property can also add any valid HTML elements. 
The following example replaces the contents of the <body> element by assigning an <h2> element as a child inside the <body> element:
document.body.innerHTML = '<h2>This is a heading</h2>'; 

Select and Modify Elements
In the previous exercise, we accessed the <body> element with the document keyword!
What if we wanted to select a specific element besides the entire <body> element? 
The DOM interface allows us to access a specific element with CSS selectors.
CSS selectors define the elements to which a set of CSS rules apply, but we can also use these same selectors to access DOM elements with JavaScript! 
Selectors can include a tag name, a class, or an ID.
The .querySelector() method allows us to specify a CSS selector as a string and returns the first element that matches that selector. 
The following code would return the first paragraph in the document.
document.querySelector('p');
Along with .querySelector(), JavaScript has more targeted methods that select elements based on their class, id, or tag name.
For example, if you want to access an element directly by its id, you can use the aptly named .getElementById() method:
document.getElementById('bio').innerHTML = 'The description';
In this example, we’ve selected the element with an ID of 'bio' and set its .innerHTML to the text 'The description'. 
Notice that the ID is passed as a string, wrapped in quotation marks (' ').
There are also the .getElementsByClassName() and .getElementsByTagName() methods which return an array of elements, instead of just one element. 
You can use bracket notation to access individual elements of an array:
// Set first element of .student class as 'Not yet registered'
document.getElementsByClassName('student')[0].innerHTML = 'Not yet registered';
 
// Set second <li> tag as 'Cedric Diggory'
document.getElementsByTagName('li')[1].innerHTML = 'Cedric Diggory`;
In the above example code, the first element with the 'student' class and the second <li> element have had their inner HTML changed.

Style an Element
Another way to modify an element is by changing its CSS style. 
The .style property of a DOM element provides access to the inline style of that HTML tag.
The syntax follows an element.style.property format, with the property representing a CSS property. 
For example, the following code selects the first element with a class of blue and assigns blue as the background-color:
let blueElement = document.querySelector('.blue');
blueElement.style.backgroundColor = 'blue';
Unlike CSS, the DOM .style property does not implement a hyphen such as background-color, but rather camel case notation, backgroundColor. 
Check out this MDN reference page https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#index to see a list of how CSS properties are converted into JavaScript.
The following chaining syntax would also work:
document.querySelector('.blue').style.fontFamily = 'Roboto';

Traversing the DOM
Let’s recap the parent and children relationship in the DOM hierarchy. 
A parent node is any node that is a direct ancestor of another node. 
A child node is a direct descendant of another node, called the parent node.
These relationships follow the nested structure of the HTML code. 
Elements nested within one HTML element are children of that parent element.
Each element has a .parentNode and .children property. 
The .parentNode property https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode returns the parent of the specified element in the DOM hierarchy. 
Note that the document element is the root node so its .parentNode property will return null. 
The .children property returns an array of the specified element’s children. 
If the element does not have any children, it will return null.
<ul id='groceries'>
  <li id='must-have'>Toilet Paper</li>
  <li>Apples</li>
  <li>Chocolate</li>
  <li>Dumplings</li>
</ul>
In the HTML code above, we have an <ul> element with the ID of groceries with four <li> elements inside.
let parentElement = document.getElementById('must-have').parentNode; // returns <ul> element
let childElements = document.getElementById('groceries').children; // returns an array of <li> elements
Here, the parentElement variable stores the .parentNode of the <li> element with the ID of must-have, which will be the <ul> element with the ID of groceries. 
The childElements variable is set to the children of the <ul> element with the ID of groceries, which will be an array of four <li> elements.