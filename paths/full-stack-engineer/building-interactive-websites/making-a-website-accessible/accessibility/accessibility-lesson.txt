Introduction to Accessibility
When designing a website, it is important to keep in mind that some users access the Internet in many different ways. 
For example, many users with a visual impairment use screen readers to access content on the Internet.
A screen reader is a piece of software that provides an audio description of a web page’s content. 
A screen reader not only reads the visual content out loud, it also reads out element names and other attributes that make it easier for visually impaired users to navigate a web page.
In the early days of the Internet, many pages were saturated with graphics and flash animations. 
Screen readers, unfortunately, could not interpret these types of elements. 
As such, a person with a visual impairment might not have been able to perceive important information on a website. 
For this reason, the Web Accessibility Initiative https://en.wikipedia.org/wiki/Web_Accessibility_Initiative (led by W3C) developed standards for making information on the Internet accessible to all.
These standards fall under a group of guidelines called ARIA https://en.wikipedia.org/wiki/WAI-ARIA, or Accessible Rich Internet Applications. 
These guidelines are easily implemented and make web pages accessible to a broader audience. 
We’ll learn how to use ARIA roles and properties in this lesson to improve access for people who are visually impaired.
In this lesson, we will cover these practices:
Semantic Elements
ARIA Roles
ARIA Properties
alt Attributes

Semantic HTML Elements
The quickest way of improving accessibility for screen readers is to use the appropriate tags for a given task.
For example, developers should wrap a navigation bar in a <header> element. 
Although the navigation bar could be wrapped in a <div> element with a class="header", the native semantics of a <header> element allows someone using a screen reader to understand and navigate a web page more efficiently.
<div id="header">
  <!-- Header Elements -->
</div>
In the example above, header content is wrapped in a <div> element with id="header". 
While this is valid HTML, an individual using a screen reader will not understand the purpose of the <div> and will have to piece the web page together as child elements are read out loud to them.
Native semantics of an element describes the element’s intended purpose. 
For example, the <header> element is intended to contain introductory and navigational elements such as a logo, links, or a search bar.
<header>
  <!--Header Elements-->
</header>
In the example above, the HTML will render the same exact content present in the first example. 
However, this example uses the correct semantic element (<header>), which allows an individual using a screen reader to easily identify the purpose of the elements inside of the header.
Here https://developer.mozilla.org/en-US/docs/Web/HTML/Element is a list of all the semantic HTML elements that exist.

ARIA Role
Text on a web page can communicate different types of information. 
Some text may make up the main content of the page, other text may describe navigation icons, still other text might describe input fields or menus. 
It can be challenging to place text in the context of a web page without knowing where it is positioned or the type of information it is meant to communicate.
Take a moment to think about how a screen reader would interpret the Codecademy web page you are looking at right now. 
It would be difficult for someone using a screen reader to understand the difference in significance between the code editor to the right and what you are currently reading.
To help add context to web page information, ARIA provides an HTML attribute called role. 
The value of an element’s role changes how a screen reader communicates the element.
<div id="code-editor" role="complementary">
  ...
</div>
In the example above, imagine the ... represents an exercise’s code editor — the section of the page containing the files of code you edit in an exercise. 
The role for the div is set to complementary. 
Visually, it makes sense that the information in the code editor is related to the information in the narrative (what you are reading right now). 
A user who uses a screen reader does not receive that visual cue.
Instead, the role="complementary" attribute and value can help a screen reader user understand that the information in the code editor is complementary (or supporting) to the information you are reading right now. 
It helps users of screen readers identify the relationship between the two sections of the page.
This https://www.w3.org/TR/html-aria/#allowed-aria-roles-states-and-properties link has a list of acceptable ARIA roles, where you can read more about the complementary role and other roles as well.

ARIA Role: Presentation
Some HTML elements, like <ul> and <ol>, only serve to organize information on a web page. 
When a screen reader navigates a page, however, it reads out to the user each element’s name as it encounters them. 
Therefore, reading “ol“ outloud will slow down visually impaired users.
We can instruct screen readers to skip reading unnecessary elements by setting the role attribute to presentation.
<ol role="presentation">
  <li>List Item 1</li>
  <li>List Item 2</li>
</ol>
In the example above, the <ol> element is assigned a role of presentation, meaning a screen reader will not read the element’s name (“ordered list”). 
This is acceptable, as a user does not need to hear the element’s name (“ordered list”) to understand the content of a list.
The presentation role skips over elements and their necessary children. 
The <ol> and <ul> elements require <li> children. 
Therefore, adding role="presentation" to an <ol> tag will cause the screen reader to skip directly to the text between the <li> tags (it will not read the names of the <li> elements).
<div id="container" role="presentation">
  <p>I'm content you want to hear!</p>
</div>
In the example above, a screen reader won’t read “div” outloud, but it will read the name of the paragraph element and the content of the paragraph. 
This happens because the paragraph is not a necessary child of the div.
To read more about the presentation role, click here https://w3c.github.io/using-aria/#presentation.

ARIA Properties
ARIA properties are attributes that you can add to HTML elements. 
These attributes provide additional information about elements that might not be obvious to users of screen readers. 
Let’s explore a property called aria-label.
<img src="#" alt="A painting of the Shenandoah Valley"/>
<p>Armand Cabrera, 2010</p>
In the example above, a person looking at the web page would likely see “Armand Cabrera” below the image and use visual clues to infer that he is the artist. 
However, for someone using a screen reader it might not be clear what the paragraph below the image means. 
The property aria-label gives the screen reader additional information to read out loud to the user.
<img src="#" alt="A painting of the Shenandoah Valley"/>
<p aria-label="Artist">Armand Cabrera, 2010</p>
In the improved HTML above, a user of a screen reader will know how this paragraph relates to the image above it.
Other ARIA properties are useful in more complex websites using HTML forms, JavaScript, and other advanced tools.
For a complete list of ARIA properties, visit the following resource:
ARIA Techniques https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques

Alt Attribute
Some HTML elements have a built-in attribute called alt that works like aria-label but has additional functionality.
The alt attribute is used to describe an image (or several other elements). 
A screen reader will read the value of the alt attribute out loud. However, if the element cannot be visually seen — whether it is because the user is visually impaired, an incorrect source is referenced, or the page is being accessed over a slow connection — the alt attribute will be displayed in its place.
On the other hand, the value of aria-label will never be displayed on the screen and is a better choice for elements that do not support the alt attribute.
<img src="#" alt="a kitten snuggling a puppy"/>
In the example above, a screen reader will read out loud “image: a kitten snuggling a puppy” to the user. 
If the image doesn’t load properly, the browser will display this text as a tooltip.
When using the alt attribute, you should adhere to these conventions:
In general, the value of alt should concisely describe the image.
For images that are also <a> elements, the alt attribute should describe the source that the link targets.
If an image conveys no information (such as a decorative border), the alt attribute should be empty, but should never be omitted.
If an image is described by text near the image, do not duplicate the description in the alt attribute. 
Use an empty alt attribute instead.
The value of an alt attribute should be no more than 150 characters.

Review: Accessibility
Using ARIA roles and properties, alt attributes, and semantic elements in your HTML is a simple way to make your website accessible to visually-impaired Internet users.
Using semantic HTML elements whenever possible (such as <header> instead of <div id="header">) will allow screen reader users to navigate your website more efficiently.
The role attribute is used to communicate information about the role of specific elements.
role="presentation" allows a screen reader to skip markup elements that don’t directly contain useful information.
aria-label and other ARIA properties can be used to help users perceive information that is communicated visually but not through text.
The alt attribute should be added to every image element (and all other elements that support it) instead of aria-label. When used, its value should be a useful description of the image.